Of course. Here is a comprehensive and well-structured prompt. You can prepend this to the detailed redesign plan we just created. This prompt is engineered to give an AI developer (or a human developer using AI assistance) the precise context, goals, and step-by-step instructions needed to execute the redesign successfully.

---

### The Prompt for the AI Developer

**Project:** Zik Frontend Redesign - "The Journey"

**Role:** You are an expert Senior Frontend Developer specializing in React Native, Expo, TypeScript, and state management with Zustand. Your task is to execute a major redesign of the Zik mobile application.

**Primary Goal:** Transform the Zik frontend from a standard task-list application into a motivational and visually engaging **"Journey Planner."** The user must intuitively feel the connection between their small daily actions and their long-term life goals.

**Core Philosophy of the Redesign:**

*   **Visualize the Journey:** Move from flat lists to interactive, visual roadmaps.
*   **Focus on Today, Inspire for Tomorrow:** The main dashboard must be actionable for today while constantly reminding the user of their bigger "why."
*   **Celebrate Every Step:** Progress must be rewarded visually. The completion of milestones should be a delightful, celebrated event.
*   **Embed AI as a Partner:** The AI's intelligence should be accessible at the point of need, not just on a separate chat screen.

**Context & Existing Architecture:**

You will be provided with the full source code of the existing application. Your primary reference for the current architecture is the attached `doc.md` file, which accurately details the project's structure, components, state management, and navigation. You must build upon this existing foundation, using the established libraries and patterns.

**Backend Assumptions & Integration:**

You are to assume the backend team is building new features in parallel. Your frontend implementation should be built to integrate with the following **new (or soon-to-be-available) API endpoints and data models**:

*   **Epic Quests (Goals):** No major changes to the `Goal` model, but it will now have a `roadmapStatus: 'none' | 'generating' | 'ready'` attribute.
*   **NEW - Roadmaps & Milestones:**
    *   **`GET /epics/{id}/roadmap`**: Fetches an ordered list of all `Milestone` objects for a given Epic Quest.
    *   **`POST /epics/{id}/generate-roadmap`**: A fire-and-forget endpoint that triggers the asynchronous backend workflow to create the roadmap.
    *   **`Milestone` Data Model:**
        ```typescript
        interface Milestone {
          milestoneId: string;
          epicId: string;
          sequence: number; // Order of the milestone (1, 2, 3...)
          title: string;
          description: string;
          status: 'locked' | 'active' | 'completed';
          durationInDays: number;
        }
        ```
*   **NEW - Just-in-Time Daily Quests:**
    *   **`GET /milestones/{id}/daily-quests`**: Fetches the specific `DailyQuest` objects for a given milestone.
    *   The `DailyQuest` (Task) model will now include an optional `milestoneId`.

---

### **Execution Plan: A Phased Approach**

Please follow this phased plan precisely. Complete each phase before moving to the next.

#### **Phase 1: Screen-Level Redesign & Navigation**

**1. Redesign `app/(tabs)/quests.tsx` (The "Roadmap Hub")**
    *   **Purpose:** This screen is no longer a list of all quests. It is now the high-level hub for all of the user's **Epic Quests**.
    *   **Actions:**
        *   The main view should fetch and display a list of Epic Quests using a modified `<QuestCard />`.
        *   Tapping an Epic Quest card must navigate the user to a new dynamic route: `app/epic/[id].tsx`.
        *   The "Create Quest" modal on this screen should now be for creating **Epic Quests only**.

**2. Create NEW Screen: `app/epic/[id].tsx` (The "Epic Roadmap Screen")**
    *   **Purpose:** To visually display the full journey for a single Epic Quest. This is a critical new screen.
    *   **Actions:**
        *   Use the `id` from the dynamic route to fetch the roadmap data from `GET /epics/{id}/roadmap`.
        *   Implement the **`<RoadmapVisualizer />`** component (see Phase 2) as the primary element, displaying all milestones.
        *   The screen header should display the Epic Quest's title.

**3. Redesign `app/(tabs)/index.tsx` (The "Today" Dashboard)**
    *   **Purpose:** To provide a focused view of the **current active milestone** and its associated daily quests.
    *   **Actions:**
        *   At the top, add a **NEW Component: `<MilestoneFocusCard />`**. This card displays the title and description of the user's *single* currently active milestone.
        *   The main list on this screen should *only* display the Daily Quests associated with that active milestone.
        *   The progress ring in the `<GreetingHeader />` should now reflect the completion percentage of the active milestone.

**4. Modify `app/(tabs)/zik.tsx` (The "AI Coach" Screen)**
    *   **Purpose:** Enhance the AI chat to be the trigger for roadmap generation.
    *   **Actions:**
        *   When a user sets a new Epic Quest via chat, the AI's response should prompt them to generate a plan.
        *   If the user agrees, the frontend should call `POST /epics/{id}/generate-roadmap` and show a "planning..." state.

#### **Phase 2: Component Implementation & Enhancement**

**1. Create NEW Component: `<RoadmapVisualizer />`**
    *   **Location:** `components/quests/RoadmapVisualizer.tsx`
    *   **Action:** Evolve the existing `<QuestPath />` into a powerful, reusable, and animated component. It should accept an array of `Milestone` objects and render them as an interactive path. Use `react-native-reanimated` for smooth animations on status changes (e.g., when a milestone becomes 'active' or 'completed').

**2. Create NEW Component: `<MilestoneFocusCard />`**
    *   **Location:** `components/today/MilestoneFocusCard.tsx`
    *   **Action:** Create a prominent card to display the details of the currently active milestone on the "Today" Dashboard.

**3. Create NEW Component: `<CelebrationAnimation />`**
    *   **Location:** `components/ui/CelebrationAnimation.tsx`
    *   **Action:** Create a full-screen modal or overlay component that plays a celebratory animation (use a Lottie file for this) when a milestone is completed.

#### **Phase 3: State Management & Data Flow Refactor**

**1. Refactor `src/store/questStore.ts` (Zustand)**
    *   **Purpose:** The store must be updated to handle the new hierarchical data structure.
    *   **Actions:**
        *   **Add new state slices:**
            ```typescript
            interface QuestState {
              epics: Goal[];
              activeRoadmap: {
                epicId: string | null;
                milestones: Milestone[];
              };
              activeMilestoneDailyQuests: Task[];
              // ... existing state
            }
            ```
        *   **Implement new actions:**
            *   `fetchEpics()`: Fetches all Epic Quests.
            *   `fetchRoadmap(epicId)`: Fetches the milestone roadmap for an epic and populates `activeRoadmap`. Also triggers fetching the daily quests for the first active milestone.
            *   `completeMilestone(milestoneId)`: Triggers the celebration animation and calls `activateNextMilestone`.
            *   `activateNextMilestone(epicId)`: Finds the next `locked` milestone in the `activeRoadmap`, sets its status to `active`, and fetches its daily quests, updating the `activeMilestoneDailyQuests` state.

**2. Update API Services (`src/api/` and `src/services/`)**
    *   **Action:** Implement the new functions required to call the backend endpoints listed in the "Backend Assumptions" section. Ensure all functions are strongly typed.

---

**Final Deliverables:**

*   Clean, commented, and performant TypeScript code that follows all existing project conventions.
*   A user interface that is not only functional but also intuitive, animated, and delightful to use.
*   A fully integrated frontend that successfully implements the "Journey Planner" user flow as described.

Use your expertise to fill in any minor gaps, ensuring the final product is polished and robust. Begin with Phase 1.
